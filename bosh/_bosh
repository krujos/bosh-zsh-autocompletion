#compdef bosh

#Call BOSH once and cache it to keep it running faster.
if [ -z "$bosh_help_output" ] ; then 
	bosh_help_output=$(bosh --help | egrep -v "BOSH|Usage" | egrep "^\w+")
fi 

if [ -z "$first_position" ] ; then 
	first_position=($(echo $bosh_help_output | awk '{ print $1 }' | tr ']' ' '))
fi

#Commands with a second position
if [ -z "$second_position" ] ; then
	second_position=("${(@f)$(echo $bosh_help_output | awk '{print $1 " " $2}' | egrep -v "\w+ \[|<")}")
fi 

#Commands with a third position
if [ -z "$third_position" ] ; then
	third_position=("${(@f)$(echo $bosh_help_output | awk '{print $1 " " $2 " " $3}' | egrep -v "\w+ \[|<")}")
fi 

find_match() {
	source=(${(P)1}) #The array of commands to match against
	position=${2}    #the position we're completing for (which just happen to work as zsh is 1 indexed)
	match_words=${3} #the words leading up to what we need to match, including spaces
	local -a matches
	local -a stripped
	stripped=(${(M)source:#$match_words*})
 	for match in $stripped ; do 
 		matches+=($(echo ${match#${match_words}} | tr -d ' '))
 	done
	if [[ 0 < ${#matches} ]]; then 
		compadd $matches
	else 
		_files
	fi
}

complete() { 
    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments \
		'1: :->first' \
		'2: :->second' \
		'3: :->third'

	case $state in 
		first) 
			_arguments "1: :($first_position)"
			;;
		second)
			find_match second_position 2 $words[2]
			;;
		third)
			find_match third_position 3 "$words[2] $words[3]"
			;;
		#Does zsh have a default?
	esac
}

complete "$@"
